package systemobject.aqua.comm.snmp.constant;

import java.util.HashMap;

import org.snmp4j.asn1.BER;
import org.snmp4j.mp.SnmpConstants;

/**
 * 
 * @author Itzhak.Hovav
 * 
 */
public enum SnmpError {

	NO_ERROR(SnmpConstants.SNMP_ERROR_SUCCESS), NO_SUCH_OBJECT(BER.NOSUCHOBJECT), NO_SUCH_INSTANCE(
			BER.NOSUCHINSTANCE), END_OF_MIB_VIEW(BER.ENDOFMIBVIEW), SNMP_ERROR_AUTHORIZATION_ERROR(
			SnmpConstants.SNMP_ERROR_AUTHORIZATION_ERROR), SNMP_ERROR_BAD_VALUE(
			SnmpConstants.SNMP_ERROR_BAD_VALUE), SNMP_ERROR_COMMIT_FAILED(
			SnmpConstants.SNMP_ERROR_COMMIT_FAILED), SNMP_ERROR_GENERAL_ERROR(
			SnmpConstants.SNMP_ERROR_GENERAL_ERROR), SNMP_ERROR_INCONSISTENT_NAME(
			SnmpConstants.SNMP_ERROR_INCONSISTENT_NAME), SNMP_ERROR_INCONSISTENT_VALUE(
			SnmpConstants.SNMP_ERROR_INCONSISTENT_VALUE), SNMP_ERROR_NO_ACCESS(
			SnmpConstants.SNMP_ERROR_NO_ACCESS), SNMP_ERROR_NO_CREATION(
			SnmpConstants.SNMP_ERROR_NO_CREATION), SNMP_ERROR_NO_SUCH_NAME(
			SnmpConstants.SNMP_ERROR_NO_SUCH_NAME), SNMP_ERROR_NOT_WRITEABLE(
			SnmpConstants.SNMP_ERROR_NOT_WRITEABLE), SNMP_ERROR_READ_ONLY(
			SnmpConstants.SNMP_ERROR_READ_ONLY), SNMP_ERROR_RESOURCE_UNAVAILABLE(
			SnmpConstants.SNMP_ERROR_RESOURCE_UNAVAILABLE), SNMP_ERROR_TOO_BIG(
			SnmpConstants.SNMP_ERROR_TOO_BIG), SNMP_ERROR_UNDO_FAILED(
			SnmpConstants.SNMP_ERROR_UNDO_FAILED), SNMP_ERROR_WRONG_ENCODING(
			SnmpConstants.SNMP_ERROR_WRONG_ENCODING), SNMP_ERROR_WRONG_LENGTH(
			SnmpConstants.SNMP_ERROR_WRONG_LENGTH), SNMP_ERROR_WRONG_TYPE(
			SnmpConstants.SNMP_ERROR_WRONG_TYPE), SNMP_ERROR_WRONG_VALUE(
			SnmpConstants.SNMP_ERROR_WRONG_VALUE), SNMP_MP_BUILD_ERROR(
			SnmpConstants.SNMP_MP_BUILD_ERROR), SNMP_MP_COMMUNITY_ERROR(
			SnmpConstants.SNMP_MP_COMMUNITY_ERROR), SNMP_MP_DOUBLED_MESSAGE(
			SnmpConstants.SNMP_MP_DOUBLED_MESSAGE), SNMP_MP_ERROR(
			SnmpConstants.SNMP_MP_ERROR), SNMP_MP_INVALID_ENGINEID(
			SnmpConstants.SNMP_MP_INVALID_ENGINEID), SNMP_MP_INVALID_MESSAGE(
			SnmpConstants.SNMP_MP_INVALID_MESSAGE), SNMP_MP_MATCH_ERROR(
			SnmpConstants.SNMP_MP_MATCH_ERROR), SNMP_MP_NOT_IN_TIME_WINDOW(
			SnmpConstants.SNMP_MP_NOT_IN_TIME_WINDOW), SNMP_MP_NOT_INITIALIZED(
			SnmpConstants.SNMP_MP_NOT_INITIALIZED), SNMP_MP_PARSE_ERROR(
			SnmpConstants.SNMP_MP_PARSE_ERROR), SNMP_MP_REPORT_SENT(
			SnmpConstants.SNMP_MP_REPORT_SENT), SNMP_MP_UNAVAILABLE_CONTEXT(
			SnmpConstants.SNMP_MP_UNAVAILABLE_CONTEXT), SNMP_MP_UNKNOWN_CONTEXT(
			SnmpConstants.SNMP_MP_UNKNOWN_CONTEXT), SNMP_MP_UNKNOWN_MSGID(
			SnmpConstants.SNMP_MP_UNKNOWN_MSGID), SNMP_MP_UNKNOWN_PDU_HANDLERS(
			SnmpConstants.SNMP_MP_UNKNOWN_PDU_HANDLERS), SNMP_MP_UNSUPPORTED_SECURITY_MODEL(
			SnmpConstants.SNMP_MP_UNSUPPORTED_SECURITY_MODEL), SNMP_MP_USM_ERROR(
			SnmpConstants.SNMP_MP_USM_ERROR), SNMP_MP_WRONG_USER_NAME(
			SnmpConstants.SNMP_MP_WRONG_USER_NAME), SNMP_V1_V2C_CSM_BAD_COMMUNITY_NAME(
			SnmpConstants.SNMPv1v2c_CSM_BAD_COMMUNITY_NAME), SNMP_V1_V2C_CSM_BAD_COMMUNITY_USE(
			SnmpConstants.SNMPv1v2c_CSM_BAD_COMMUNITY_USE), SNMP_V3_USM_ADDRESS_ERROR(
			SnmpConstants.SNMPv3_USM_ADDRESS_ERROR), SNMP_V3_USM_AUTHENTICATION_ERROR(
			SnmpConstants.SNMPv3_USM_AUTHENTICATION_ERROR), SNMP_V3_USM_AUTHENTICATION_FAILURE(
			SnmpConstants.SNMPv3_USM_AUTHENTICATION_FAILURE), SNMP_V3_USM_DECRYPTION_ERROR(
			SnmpConstants.SNMPv3_USM_DECRYPTION_ERROR), SNMP_V3_USM_ENCRYPTION_ERROR(
			SnmpConstants.SNMPv3_USM_ENCRYPTION_ERROR), SNMP_V3_USM_ERROR(
			SnmpConstants.SNMPv3_USM_ERROR),
	// SNMP_V3_USM_ERROR_CONFIGFILE(SnmpConstants.SNMPv3_USM_ERROR_CONFIGFILE),
	SNMP_V3_USM_NOT_IN_TIME_WINDOW(SnmpConstants.SNMPv3_USM_NOT_IN_TIME_WINDOW), SNMP_V3_USM_PARSE_ERROR(
			SnmpConstants.SNMPv3_USM_PARSE_ERROR), SNMP_V3_USM_UNKNOWN_ENGINEID(
			SnmpConstants.SNMPv3_USM_UNKNOWN_ENGINEID), SNMP_V3_USM_UNKNOWN_SECURITY_NAME(
			SnmpConstants.SNMPv3_USM_UNKNOWN_SECURITY_NAME), SNMP_V3_USM_UNSUPPORTED_AUTHPROTOCOL(
			SnmpConstants.SNMPv3_USM_UNSUPPORTED_AUTHPROTOCOL), SNMP_V3_USM_UNSUPPORTED_PRIVPROTOCOL(
			SnmpConstants.SNMPv3_USM_UNSUPPORTED_PRIVPROTOCOL), SNMP_V3_USM_UNSUPPORTED_SECURITY_LEVEL(
			SnmpConstants.SNMPv3_USM_UNSUPPORTED_SECURITY_LEVEL), SNMP_ERROR_TIMEOUT(
			Integer.MIN_VALUE);

	private int value;

	private static HashMap<Integer, SnmpError> map = null;

	SnmpError(int value) {
		this.value = value;
	}

	public int value() {
		return value;
	}

	public static SnmpError get(int value) {
		if (map == null) {
			SnmpError[] arr = values();
			map = new HashMap<Integer, SnmpError>((arr.length * 3) / 2);
			for (SnmpError e : arr) {
				map.put(e.value(), e);
			}
		}
		SnmpError e = map.get(value);
		if (e == null) {
			e = SNMP_ERROR_TIMEOUT;
		}
		return e;
	}

}
